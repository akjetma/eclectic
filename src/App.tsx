/* eslint-disable */
import * as THREE from 'three'
import * as React from 'react'
import { Suspense, useState } from 'react'
import { Canvas } from '@react-three/fiber'
import { KeyboardControls, Text3D, Center } from '@react-three/drei'
import { Physics, RigidBody } from '@react-three/rapier'
import Ecctrl from 'ecctrl'
import { Capsule } from '@react-three/drei'
import WelcomeMessage from './WelcomeMessage'

// ts compiler doesn't like like the file generated by gltfjsx, fix later
// @ts-ignore
import Dust2 from './Dust2'

export default function App() {

  const keyboardMap = [
    { name: 'forward', keys: ['ArrowUp', 'KeyW'] },
    { name: 'backward', keys: ['ArrowDown', 'KeyS'] },
    { name: 'leftward', keys: ['ArrowLeft', 'KeyA'] },
    { name: 'rightward', keys: ['ArrowRight', 'KeyD'] },
    { name: 'jump', keys: ['Space'] },
    { name: 'run', keys: ['Shift'] }
  ]

  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.src = "./wow.mp4";
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.playsInline = true;
    return vid;
  });

  const [tex] = useState(() => new THREE.VideoTexture(video));

  return (
    <Canvas scene={{ background: tex }}
            onPointerDown={(e) => {
              console.log("pointerdown");
              if (e.pointerType === "mouse" && e.target instanceof HTMLElement) {
                e.target.requestPointerLock();
              }
              video.play();
            }}>
      <Suspense>
        <Physics>
          <KeyboardControls map={keyboardMap}>
            <Ecctrl jumpVel={1.5} // jump velocity
                    position={[-10, 3, 12]} // character position i think 
                    camInitDis={-0.01} // camera intial position
                    camInitDir={{ x: 0, y: Math.PI/2 }} // camera initial direction
                    camMinDis={-0.01} // camera zoom in closest position
                    camFollowMult={100} // give any big number here, so the camera follows the character instantly
                    turnVelMultiplier={1} // Turning speed same as moving speed
                    turnSpeed={100} // give it big turning speed to prevent turning wait time
                    mode="CameraBasedMovement" /* character's rotation will follow camera's rotation in this mode */
                    capsuleRadius={0.3}>
              <Capsule> {/* Capsule is the character's collider */}
                <WelcomeMessage /> {/* child of character collider so we can orient towards camera */}
              </Capsule>
            </Ecctrl>
          </KeyboardControls>
          <RigidBody colliders="trimesh" type="fixed">
            <Dust2 />
          </RigidBody>
        </Physics>
      </Suspense>
    </Canvas>
  )
}
